#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var optimist = require('optimist');
var ejt = require('../ejt');

var argv = optimist
	.usage('EJT template compiler\n\nUsage: ejt source [destination]')
	.describe('o', 'Output file (default is stdout)')
	.alias('o', 'out')
	.describe('e', 'Source file extension')
	.default('e', 'html')
	.alias('e', 'ext')
	.describe('open', 'Open tag')
	.default('open', '<%')
	.describe('close', 'Closing tag')
	.default('close', '%>')
	.describe('h', 'Show this message')
	.alias('h', 'help')
	.argv;

var options = {
  open: argv.open,
  close: argv.close,
  ext: argv.ext || 'html',
  src: argv['_'][0],
  dest: argv.o || argv['_'][1] || null
};

options.ext = '.'+options.ext;
options.root = path.dirname(options.src);
options.file = path.basename(options.src);
//console.log('Options', options);

var renderer = ejt(options);

var compile = function (content) {
	try {

		var compiled = renderer.compile(content);

	} catch (err) {
		console.error(err.message);
		process.exit();
	}

  return compiled;
};

var compileFile = function() {
  try {
		file = fs.readFileSync(options.src);
	} catch (err) {
		console.error(err.message);
		process.exit();
	}
	writeResult( compile( file.toString() ) );
};

var renderFile = function() {
  var data = {};

  //console.log('render', options.src);
  renderer.render(options.src, data, function(err, html) {
    if (err) {
      throw err;
    }
    writeResult( html );
  });
};

var writeResult = function( result ) {
  //console.log('result', result);
	try {
		if ( options.dest ) {
      //console.log('write', options.dest)
			fs.writeFileSync(options.dest, result);
		} else {
      // stdout
			console.log(result);
		}
	} catch (err) {
		console.error(err.message);
		process.exit();
	}
}

var read = function () {
	var stats;
  //console.log('read', options.src);

	try {
		stats = fs.statSync(options.src);
	} catch (err) {
		console.error(err.message);
		process.exit();
	}
	if (stats.isDirectory()) {
		// Directory
		// TODO Recursive traversal
	} else {
		// File
    renderFile()
	}
};

if (argv.help || !argv['_'].length) {
	optimist.showHelp();
} else {
	read();
}
